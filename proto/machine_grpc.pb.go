// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/machine.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MachineService_StartMachine_FullMethodName = "/proto.MachineService/StartMachine"
	MachineService_StopMachine_FullMethodName  = "/proto.MachineService/StopMachine"
	MachineService_CloneMachine_FullMethodName = "/proto.MachineService/CloneMachine"
	MachineService_ListMachines_FullMethodName = "/proto.MachineService/ListMachines"
)

// MachineServiceClient is the client API for MachineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MachineServiceClient interface {
	StartMachine(ctx context.Context, in *StartMachineRequest, opts ...grpc.CallOption) (*MachineResponse, error)
	StopMachine(ctx context.Context, in *StopMachineRequest, opts ...grpc.CallOption) (*StopMachineResponse, error)
	CloneMachine(ctx context.Context, in *CloneMachineRequest, opts ...grpc.CallOption) (*MachineResponse, error)
	ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error)
}

type machineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMachineServiceClient(cc grpc.ClientConnInterface) MachineServiceClient {
	return &machineServiceClient{cc}
}

func (c *machineServiceClient) StartMachine(ctx context.Context, in *StartMachineRequest, opts ...grpc.CallOption) (*MachineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MachineResponse)
	err := c.cc.Invoke(ctx, MachineService_StartMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) StopMachine(ctx context.Context, in *StopMachineRequest, opts ...grpc.CallOption) (*StopMachineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopMachineResponse)
	err := c.cc.Invoke(ctx, MachineService_StopMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) CloneMachine(ctx context.Context, in *CloneMachineRequest, opts ...grpc.CallOption) (*MachineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MachineResponse)
	err := c.cc.Invoke(ctx, MachineService_CloneMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMachinesResponse)
	err := c.cc.Invoke(ctx, MachineService_ListMachines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MachineServiceServer is the server API for MachineService service.
// All implementations must embed UnimplementedMachineServiceServer
// for forward compatibility.
type MachineServiceServer interface {
	StartMachine(context.Context, *StartMachineRequest) (*MachineResponse, error)
	StopMachine(context.Context, *StopMachineRequest) (*StopMachineResponse, error)
	CloneMachine(context.Context, *CloneMachineRequest) (*MachineResponse, error)
	ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error)
	mustEmbedUnimplementedMachineServiceServer()
}

// UnimplementedMachineServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMachineServiceServer struct{}

func (UnimplementedMachineServiceServer) StartMachine(context.Context, *StartMachineRequest) (*MachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMachine not implemented")
}
func (UnimplementedMachineServiceServer) StopMachine(context.Context, *StopMachineRequest) (*StopMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopMachine not implemented")
}
func (UnimplementedMachineServiceServer) CloneMachine(context.Context, *CloneMachineRequest) (*MachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneMachine not implemented")
}
func (UnimplementedMachineServiceServer) ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachines not implemented")
}
func (UnimplementedMachineServiceServer) mustEmbedUnimplementedMachineServiceServer() {}
func (UnimplementedMachineServiceServer) testEmbeddedByValue()                        {}

// UnsafeMachineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MachineServiceServer will
// result in compilation errors.
type UnsafeMachineServiceServer interface {
	mustEmbedUnimplementedMachineServiceServer()
}

func RegisterMachineServiceServer(s grpc.ServiceRegistrar, srv MachineServiceServer) {
	// If the following call pancis, it indicates UnimplementedMachineServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MachineService_ServiceDesc, srv)
}

func _MachineService_StartMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).StartMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineService_StartMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).StartMachine(ctx, req.(*StartMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_StopMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).StopMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineService_StopMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).StopMachine(ctx, req.(*StopMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_CloneMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).CloneMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineService_CloneMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).CloneMachine(ctx, req.(*CloneMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_ListMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).ListMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineService_ListMachines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).ListMachines(ctx, req.(*ListMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MachineService_ServiceDesc is the grpc.ServiceDesc for MachineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MachineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MachineService",
	HandlerType: (*MachineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartMachine",
			Handler:    _MachineService_StartMachine_Handler,
		},
		{
			MethodName: "StopMachine",
			Handler:    _MachineService_StopMachine_Handler,
		},
		{
			MethodName: "CloneMachine",
			Handler:    _MachineService_CloneMachine_Handler,
		},
		{
			MethodName: "ListMachines",
			Handler:    _MachineService_ListMachines_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/machine.proto",
}
